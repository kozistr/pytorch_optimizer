name: Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  prepend-changelog:
    name: Append Change Log
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Prepend changelog to CHANGELOG.md
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          CHANGELOG_FILE="docs/changelogs/$VERSION.md"
          MAIN_CHANGELOG="CHANGELOG.md"

          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "No changelog found for $VERSION"
            exit 1
          fi

          TMP_FILE=$(mktemp)

          echo "# $VERSION" > "$TMP_FILE"
          cat "$CHANGELOG_FILE" >> "$TMP_FILE"
          echo "" >> "$TMP_FILE"
          cat "$MAIN_CHANGELOG" >> "$TMP_FILE"
          mv "$TMP_FILE" "$MAIN_CHANGELOG"

      - name: Commit updated CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v6
        id: auto-commit-action
        with:
          commit_message: "docs: prepend ${{ env.TAG_NAME }} changelog to CHANGELOG.md"
          file_pattern: CHANGELOG.md
          commit_user_name: "pytorch_optimizer-actions[bot]"
          commit_user_email: "pytorch_optimizer-actions[bot]@users.noreply.github.com"
          push_options: "--force"

      - name: "Run if changes have been detected"
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        run: echo "Changes!"

      - name: "Run if no changes have been detected"
        if: steps.auto-commit-action.outputs.changes_detected == 'false'
        run: echo "No Changes!"
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: pytorch-optimizer ${{ github.ref }}
          body_path: docs/changelogs/${{ steps.get_version.outputs.VERSION }}.md
          draft: false
          prerelease: false
  deploy:
    name: Deploy
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip --disable-pip-version-check install --no-compile poetry
          pip --disable-pip-version-check install --no-compile -r requirements.txt

      - name: Publish package to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build
