name: Publish

on:
  push:
    tags:
      - 'v*'

jobs:

  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Extract tag version
        id: extract
        run: echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  prepend-changelog:
    name: Prepend Change Log
    runs-on: ubuntu-latest
    needs: get-version

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepend changelog to CHANGELOG.md
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          CHANGELOG_FILE="docs/changelogs/$VERSION.md"

          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "No changelog found for $VERSION"
            exit 1
          fi

          MAIN_CHANGELOG="CHANGELOG.md"
          TMP_FILE=$(mktemp)

          {
            echo "# $VERSION"
            echo
            cat "$CHANGELOG_FILE"
            echo
            cat "$MAIN_CHANGELOG"
          } > "$TMP_FILE"

          mv "$TMP_FILE" "$MAIN_CHANGELOG"

      - name: Create Pull Request
        id: create_pull_request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: "docs/changelog-update-${{ needs.get-version.outputs.version }}"
          commit-message: "[skip ci] docs: prepend changelog for ${{ needs.get-version.outputs.version }}"
          title: "[Docs] Prepend changelog for ${{ needs.get-version.outputs.version }}"
          body: "Automated changelog update for ${{ needs.get-version.outputs.version }}"
          base: main
          delete-branch: true
          labels: automerge
          token: ${{ secrets.GH_TOKEN }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [get-version, prepend-changelog]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: pytorch-optimizer ${{ github.ref }}
          body_path: docs/changelogs/${{ needs.get-version.outputs.version }}.md
          draft: false
          prerelease: false

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip --disable-pip-version-check install --no-compile poetry
          pip --disable-pip-version-check install --no-compile -r requirements.txt

      - name: Publish package to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build
