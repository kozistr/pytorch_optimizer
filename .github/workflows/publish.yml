name: Publish

on:
  push:
    tags:
      - 'v*'

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: pytorch-optimizer ${{ github.ref }}
          body_path: docs/changelogs/${{ steps.get_version.outputs.VERSION }}.md
          draft: false
          prerelease: false
  deploy:
    name: Deploy
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: 'pip'

      - name: Install dependencies
        run: |
          url -LsSf https://astral.sh/uv/install.sh | sh
          export VIRTUAL_ENV=$(python -c "import sys; print(sys.prefix)")
          uv pip install --no-compile poetry
          uv pip install --no-compile -r requirements.txt

      - name: Publish package to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build
