[tool.poetry]
name = "pytorch_optimizer"
version = "2.9.1"
description = "optimizer & lr scheduler collections in PyTorch"
license = "Apache-2.0"
authors = ["kozistr <kozistr@gmail.com>"]
maintainers = ["kozistr <kozistr@gmail.com>"]
readme = "README.rst"
homepage = "https://github.com/kozistr/pytorch_optimizer"
repository = "https://github.com/kozistr/pytorch_optimizer"
documentation = "https://pytorch-optimizers.readthedocs.io/en/latest"
keywords = ["pytorch", "deep-learning", "optimizer", "lr scheduler", "A2Grad", "ASGD", "AccSGD", "AdaBelief", "AdaBound", "AdaDelta", "AdaFactor", "AdaMax", "AdaMod", "AdaNorm", "AdaPNM", "AdaSmooth", "Adai", "AdamP", "AdamS", "Adan", "AggMo", "AliG", "Amos", "Apollo", "AvaGrad", "DAdaptAdaGrad", "DAdaptAdam", "DAdaptAdan", "DAdaptSGD", "DiffGrad", "Fromage", "Gravity", "LARS", "Lamb", "Lion", "MADGRAD", "MSVAG", "Nero", "NovoGrad", "PID", "PNM", "QHAdam", "QHM", "RAdam", "Ranger", "Ranger21", "SGDP", "SGDW", "SM3", "Sophia", "SRMM", "SWATS", "ScalableShampoo", "Shampoo", "Yogi", "SAM", "GSAM", "PCGrad", "RotoGrad"]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.7.2"
numpy = [
    { version = "=1.21.1", python = ">=3.7,<3.8" },
    { version = "*", python = ">=3.8" },
]
torch = [
    { version = ">=1.10", python = ">=3.8", source = "torch" },
    { version = "^1.10", python = ">=3.7,<3.8", source = "torch" },
]

[tool.poetry.dev-dependencies]
isort = [
    { version = "==5.11.5", python = ">=3.7,<3.8"},
    { version = "^5.12.0", python = ">=3.8"}
]
black = "^23.3.0"
ruff = "^0.0.264"
pytest = "^7.3.1"
pytest-cov = "^4.0.0"

[[tool.poetry.source]]
name = "torch"
url = "https://download.pytorch.org/whl/cpu"
secondary = true

[tool.ruff]
select = ["A", "B", "C4", "D", "E", "F", "G", "I", "N", "S", "T", "ISC", "ICN", "W", "INP", "PIE", "T20", "RET", "SIM", "TID", "ARG", "ERA", "RUF", "YTT", "PL"]
ignore = ["D100", "D102", "D104", "D105", "D107", "D203", "D213", "PIE790", "PLR0912", "PLR0913", "PLR0915", "PLR2004"]
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = ["F401"]
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".github",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
    "assets",
]
line-length = 119
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py39"

[tool.ruff.per-file-ignores]
"./hubconf.py" = ["D", "INP001"]
"./tests/__init__.py" = ["D"]
"./tests/constants.py" = ["D"]
"./tests/utils.py" = ["D"]
"./tests/test_base.py" = ["D", "S101"]
"./tests/test_utils.py" = ["D", "S101"]
"./tests/test_gradients.py" = ["D", "S101"]
"./tests/test_optimizers.py" = ["D", "S101"]
"./tests/test_optimizer_parameters.py" = ["D", "S101"]
"./tests/test_general_optimizer_parameters.py" = ["D", "S101"]
"./tests/test_load_optimizers.py" = ["D", "S101"]
"./tests/test_load_lr_schedulers.py" = ["D", "S101"]
"./tests/test_lr_schedulers.py" = ["D"]
"./tests/test_lr_scheduler_parameters.py" = ["D", "S101"]
"./tests/test_create_optimizer.py" = ["D"]
"./pytorch_optimizer/__init__.py" = ["F401"]
"./pytorch_optimizer/lr_scheduler/__init__.py" = ["F401"]

[tool.coverage.run]
omit = [
    "./pytorch_optimizer/optimizer/gsam.py",
    "./pytorch_optimizer/optimizer/fp16.py",
    "./pytorch_optimizer/optimizer/rotograd.py",
    "./pytorch_optimizer/optimizer/swats.py",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
