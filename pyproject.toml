[tool.poetry]
name = "pytorch_optimizer"
version = "2.12.0"
description = "optimizer & lr scheduler & objective function collections in PyTorch"
license = "Apache-2.0"
authors = ["kozistr <kozistr@gmail.com>"]
maintainers = ["kozistr <kozistr@gmail.com>"]
readme = "README.md"
homepage = "https://github.com/kozistr/pytorch_optimizer"
repository = "https://github.com/kozistr/pytorch_optimizer"
documentation = "https://pytorch-optimizers.readthedocs.io/en/latest"
keywords = [
    "pytorch", "deep-learning", "optimizer", "lr scheduler", "A2Grad", "ASGD", "AccSGD", "AdaBelief", "AdaBound",
    "AdaDelta", "AdaFactor", "AdaMax", "AdaMod", "AdaNorm", "AdaPNM", "AdaSmooth", "AdaHessian", "Adai", "AdamP",
    "AdamS", "Adan", "AggMo", "Aida", "AliG", "Amos", "Apollo", "AvaGrad", "CAME", "DAdaptAdaGrad", "DAdaptAdam",
    "DAdaptAdan", "DAdaptSGD", "DAdaptLion", "DiffGrad", "Fromage", "Gravity", "GSAM", "LARS", "Lamb", "Lion", "LOMO",
    "Lookahead", "MADGRAD", "MSVAG", "Nero", "NovoGrad", "PAdam", "PCGrad", "PID", "PNM", "Prodigy", "QHAdam", "QHM",
    "RAdam", "Ranger", "Ranger21", "RotoGrad", "SAM", "SGDP", "Shampoo", "ScalableShampoo", "SGDW", "SignSGD", "SM3",
    "SopihaH", "SRMM", "SWATS", "Tiger", "WSAM", "Yogi", "BCE", "BCEFocal", "Focal", "FocalCosine", "SoftF1", "Dice",
    "LDAM", "Jaccard", "Bi-Tempered", "Tversky", "FocalTversky", "LovaszHinge", "bitsandbytes",
]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = ">=3.8,<4.0.0"
numpy = { version = "*", python = ">=3.8" }
torch = { version = ">=1.10", python = ">=3.8", source = "torch" }
bitsandbytes = { version = "^0.42", optional = true }

[tool.poetry.dev-dependencies]
isort = { version = "^5", python = ">=3.8" }
ruff = "^0"
pytest = "^8"
pytest-cov = "^4"

[tool.poetry.extras]
bitsandbytes = ["bitsandbytes"]

[[tool.poetry.source]]
name = "torch"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.ruff]
lint.select = [
    "A", "B", "C4", "D", "E", "F", "G", "I", "N", "S", "T", "ISC", "ICN", "W", "INP", "PIE", "T20", "RET", "SIM",
    "TID", "ARG", "ERA", "RUF", "YTT", "PL", "Q",
]
lint.ignore = [
    "B905", "D100", "D102", "D104", "D105", "D107", "D203", "D213", "D413", "PIE790", "PLR0912", "PLR0913", "PLR0915",
    "PLR2004", "RUF013", "Q003", "ISC001"
]
lint.fixable = ["ALL"]
lint.unfixable = ["F401"]
exclude = [
    ".git",
    ".github",
    ".idea",
    ".ipynb_checkpoints",
    ".pytest_cache",
    ".ruff_cache",
    "assets",
    "dist",
    "docs",
    ".venv",
    "__pypackages__",
]
line-length = 119
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py311"
lint.flake8-quotes.docstring-quotes = "double"
lint.flake8-quotes.inline-quotes = "single"
lint.pylint.max-args = 7

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"
quote-style = "single"

[tool.ruff.lint.per-file-ignores]
"./pytorch_optimizer/__init__.py" = ["F401"]
"./pytorch_optimizer/lr_scheduler/__init__.py" = ["F401"]
"./hubconf.py" = ["D", "INP001"]
"./tests/__init__.py" = ["D"]
"./tests/constants.py" = ["D"]
"./tests/utils.py" = ["D"]
"./tests/test_base.py" = ["D", "S101"]
"./tests/test_utils.py" = ["D", "S101", "ERA001"]
"./tests/test_gradients.py" = ["D", "S101"]
"./tests/test_optimizers.py" = ["D", "S101"]
"./tests/test_optimizer_parameters.py" = ["D", "S101"]
"./tests/test_general_optimizer_parameters.py" = ["D", "S101"]
"./tests/test_lr_schedulers.py" = ["D", "S101"]
"./tests/test_lr_scheduler_parameters.py" = ["D", "S101"]
"./tests/test_create_optimizer.py" = ["D"]
"./tests/test_loss_functions.py" = ["D", "S101"]
"./tests/test_load_modules.py" = ["D", "S101"]

[tool.pytest.ini_options]
testpaths = "tests"

[tool.coverage.run]
omit = [
    "./pytorch_optimizer/optimizer/rotograd.py",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
